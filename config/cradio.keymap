#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define NAV 1
#define SYM 2
#define FNC 3

#define VL_UP C_VOL_UP
#define VL_DN C_VOL_DN

#define WN_FWD LA(TAB)
#define WN_BK LA(LS(TAB))

#define TAB_FWD LC(TAB)
#define TAB_BK LC(LS(TAB))

#define WN_SNIP LG(LS(S))

#define SL_UP C_AC_SCROLL_UP
#define SL_DN C_AC_SCROLL_DOWN

#define B0 BT_SEL 0
#define B1 BT_SEL 1
#define B2 BT_SEL 2
#define B3 BT_SEL 3

#define STICKY_KEY_TIMEOUT 60000
&sk {
    ignore-modifiers;
    release-after-ms = <STICKY_KEY_TIMEOUT>;
};

/ {

    behaviors {
        TD_LDR: tap_dance_bootloader {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BOOTLOADER";
            #binding-cells = <0>;
            bindings = <&none>, <&none>, <&bootloader>;
        };

        TD_CPY_CT: tap_dance_copy_cut {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_COPY_CUT";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>, <&kp LC(X)>;
        };

        TD_CTRL_ALT: tap_dance_control_alt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_COPY_CUT";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>, <&kp LC(X)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_function_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    #include "custom.combos"

    keymap {
        compatible = "zmk,keymap";

        default_layer {
        bindings = <
            &kp QUOT &kp COMMA &kp DOT &kp P &kp Y   &kp F &kp G &kp C &kp R &kp L
            &kp A    &kp O     &kp E   &kp U &kp I   &kp D &kp H &kp T &kp N &kp S
            &kp Z    &kp Q     &kp J   &kp K &kp X   &kp B &kp M &kp W &kp V &kp Z
                                 &mo NAV &kp LSHFT   &kp SPC &mo SYM
        >;
        };

        navigation_layer {
        bindings = <
            &kp TAB_FWD &kp TAB_BK &kp WN_FWD &kp WN_BK &kp VL_UP   &kp CAPS  &kp HOME  &kp UP    &kp END   &kp DEL
            &sk LGUI    &sk LALT   &sk LCTRL  &sk LSHFT &kp TAB     &kp ESC   &kp LEFT  &kp DOWN  &kp RIGHT &kp BSPC
            &kp LC(Z)   &kp LC(Y)  &TD_CPY_CT &kp LC(V) &kp VL_DN   &kp PG_UP &kp SL_UP &kp SL_DN &kp PG_DN &none
                                               &trans &kp WN_SNIP   &kp ENTER &trans
        >;
        };

        symbol_layer {
        bindings = <
            &kp GRAVE &kp LBKT &kp LPAR  &kp LBRC  &kp TILDE   &kp CARET &kp RBRC &kp RPAR  &kp RBKT  &kp GRAVE
            &kp MINUS &kp STAR &kp EQUAL &kp UNDER &kp DLLR    &kp HASH  &sk RSHFT &sk RCTRL &sk RALT &sk RGUI
            &kp PLUS  &kp PIPE &kp AT    &kp BSLH  &kp PRCNT   &kp AMPS  &kp FSLH &kp QMARK &kp COLON &kp EXCL
                                             &trans &kp LCTL   &kp SPC  &trans
        >;
        };

        function_layer {
        bindings = <
            &none   &kp N6 &kp N5 &kp N4 &TD_LDR   &kp F8 &kp F9    &kp F10   &kp F11  &kp F12
            &kp N0  &kp N3 &kp N2 &kp N1 &none     &kp F7 &sk RSHFT &sk RCTRL &sk RALT &sk RGUI
            &kp DOT &kp N9 &kp N8 &kp N7 &kp F13   &kp F6 &kp F5    &kp F4    &kp F3   &kp F2
                                   &trans &trans   &kp F1 &trans
        >;
        };

        keyboard_utility_layer {
        bindings = <
            &none  &none  &none  &none  &TD_LDR      &TD_LDR    &none &none &none &none
            &bt B0 &bt B3 &bt B2 &bt B1 &none        &none      &none &none &none &none
            &none  &none  &none  &none  &bt BT_CLR   &bt BT_CLR &none &none &none &none
                                     &trans &trans   &trans &trans
        >;
        };

        game_layer {
        bindings = <
            &kp ESC  &kp Q &kp W &kp E &kp R   &kp T &kp Y    &kp UP   &kp I    &kp O
            &kp LSFT &kp A &kp S &kp D &kp F   &kp G &kp LEFT &kp DOWN &kp RGHT &kp L
            &kp TAB  &kp Z &kp X &kp C &kp V   &kp B &kp N    &kp M    &kp COMM &kp DOT
                      &TD_CTRL_ALT &kp SPACE   &trans &to DEF
        >;
        };

    };
};
