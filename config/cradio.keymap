#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define SYM 1
#define NAV 2
#define FNC 3

#define VOL_UP &none
#define VOL_DWN &none

#define WN_FWD LA(TAB)
#define WN_BK LA(LS(TAB))

#define TAB_FWD LC(TAB)
#define TAB_BK LC(LS(TAB))

&sk {
    ignore-modifiers;
};

/ {

    behaviors {
        TD_LDR: tap_dance_bootloader {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BOOTLOADER";
            #binding-cells = <0>;
            bindings = <&none>, <&none>, <&bootloader>;
        };

        TD_CPY_CT: tap_dance_copy_cut {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_COPY_CUT";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>, <&kp LC(X)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_gui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };

        combo_left_vertical_enter {
            timeout-ms = <50>;
            key-positions = <11 21>;
            bindings = <&kp ENTER>;
        };

        combo_right_vertical_enter {
            timeout-ms = <50>;
            key-positions = <8 18>;
            bindings = <&kp ENTER>;
        };

        combo_left_vertical_escape {
            timeout-ms = <50>;
            key-positions = <2 12>;
            bindings = <&kp ESC>;
        };

        combo_right_vertical_escape {
            timeout-ms = <50>;
            key-positions = <7 17>;
            bindings = <&kp ESC>;
        };

        combo_left_vertical_delete {
            timeout-ms = <50>;
            key-positions = <3 13>;
            bindings = <&kp DEL>;
        };

        combo_right_vertical_backspace {
            timeout-ms = <50>;
            key-positions = <6 16>;
            bindings = <&kp BSPC>;
        };

    };

        keymap {
                compatible = "zmk,keymap";

       	default_layer {
		bindings = <
        &kp QUOT &kp COMMA &kp DOT &kp R &kp T     &kp F &kp G &kp C &kp R &kp L
        &kp A    &kp O     &kp E   &kp U &kp I     &kp D &kp H &kp T &kp N &kp S
        &kp Z    &kp Q     &kp J   &kp K &kp X     &kp B &kp M &kp W &kp V &kp Z
                             &mo NAV &kp LSHFT     &kp SPC &mo SYM
		>;
		};

       	navigation_layer {
		bindings = <
        &kp TAB_FWD &kp TAB_BK &kp WN_FWD &kp WN_BK VOL_UP     &kp CAPS &kp HOME  &kp UP   &kp END   &kp DEL
        &sk LGUI    &sk LSHFT  &sk LCTRL  &sk LALT  &kp TAB    &kp ESC  &kp LEFT  &kp DOWN &kp RIGHT &kp BSPC
        &kp LC(Z)   &kp LC(Y)  &TD_CPY_CT &kp LC(V) VOL_DWN    &none    &kp PG_UP &kp PG_DN &none  &kp LC(S)
					                          &trans  &none    &kp ENTER &trans
		>;
		};

		symbol_layer {
		bindings = <
        &kp GRAVE &kp LBKT &kp LPAR  &kp LBRC  &kp TILDE   &kp CARET &kp RBRC &kp RPAR   &kp RBKT   &kp GRAVE
        &kp MINUS &kp STAR &kp EQUAL &kp UNDER &kp DLLR    &kp HASH  &sk RALT &sk RCTRL  &sk RSHFT &sk RGUI
        &kp PLUS  &kp PIPE &kp AT    &kp BSLH  &kp PRCNT   &kp AMPS  &kp FSLH  &kp QMARK &kp COLON  &kp EXCL
                                         &trans &kp LCTL   &kp SPC  &trans
		>;
		};

		function_layer {
		bindings = <
            &none  &kp N6 &kp N5 &kp N4 &TD_LDR    &kp F8 &kp F9   &kp F10   &kp F11    &kp F12
            &kp N0 &kp N3 &kp N2 &kp N1 &none      &kp F7 &sk RALT &sk RCTRL &sk RSHFT &sk RGUI
            &none  &kp N9 &kp N8 &kp N7 &none	   &kp F6 &kp F5   &kp F4    &kp F3     &kp F2
					            &trans &trans  	   &kp F13 &trans
		>;
		};

	};
};
